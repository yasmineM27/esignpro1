const http = require('http');
const fs = require('fs');

function makeRequest(url, options = {}) {
    return new Promise((resolve, reject) => {
        const urlObj = new URL(url);
        const requestOptions = {
            hostname: urlObj.hostname,
            port: urlObj.port,
            path: urlObj.pathname + urlObj.search,
            method: options.method || 'GET',
            headers: options.headers || {}
        };

        const req = http.request(requestOptions, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(data);
                    resolve(jsonData);
                } catch (e) {
                    resolve({ 
                        success: false, 
                        error: 'Invalid JSON response', 
                        rawData: data,
                        statusCode: res.statusCode,
                        isZip: data.length > 1000 && data.includes('PK')
                    });
                }
            });
        });

        req.on('error', (err) => reject(err));
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

async function testDownloadOpsioFix() {
    console.log('üì¶ TEST: V√âRIFICATION DOCUMENT OPSIO DANS T√âL√âCHARGEMENT\n');
    
    try {
        // Test 1: R√©cup√©rer la liste des dossiers
        console.log('üìã Test 1: R√©cup√©ration des dossiers...');
        
        const casesResponse = await makeRequest('http://localhost:3001/api/admin/cases');
        
        if (!casesResponse.success || !casesResponse.cases?.length) {
            console.log('‚ùå Aucun dossier trouv√© pour le test');
            return;
        }
        
        const testCase = casesResponse.cases[0];
        console.log('‚úÖ Dossier de test trouv√©:', testCase.case_number);
        console.log('- Client ID:', testCase.client_id);
        console.log('- Case ID:', testCase.id);
        
        // Test 2: Test de g√©n√©ration OPSIO directe
        console.log('\nüìã Test 2: G√©n√©ration OPSIO directe...');
        
        const opsioData = {
            clientName: 'Test Client OPSIO',
            clientAddress: 'Rue de Test 123',
            clientPostalCity: '1200 Gen√®ve',
            clientBirthdate: '15.05.1980',
            clientEmail: 'test@email.com',
            clientPhone: '+41 79 123 45 67',
            advisorName: 'Marie Martin',
            advisorEmail: 'marie.martin@opsio.ch',
            advisorPhone: '+41 78 305 12 77',
            paymentMethod: 'commission',
            signatureData: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=='
        };
        
        const opsioResponse = await makeRequest('http://localhost:3001/api/documents/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                documentType: 'opsio-info-sheet',
                data: opsioData
            })
        });
        
        console.log('R√©sultat g√©n√©ration OPSIO directe:');
        console.log('- Succ√®s:', opsioResponse.success ? '‚úÖ' : '‚ùå');
        
        if (opsioResponse.success) {
            console.log('- Document ID:', opsioResponse.document?.id);
            console.log('- Type MIME:', opsioResponse.document?.mimeType);
            console.log('- Taille:', opsioResponse.document?.content?.length || 0, 'caract√®res');
            
            // Sauvegarder pour v√©rification
            if (opsioResponse.document?.content) {
                const buffer = Buffer.from(opsioResponse.document.content, 'base64');
                fs.writeFileSync('test-opsio-direct-generation.docx', buffer);
                console.log('‚úÖ Document OPSIO direct sauvegard√©: test-opsio-direct-generation.docx');
            }
        } else {
            console.log('‚ùå Erreur g√©n√©ration OPSIO:', opsioResponse.error);
        }
        
        // Test 3: Test de t√©l√©chargement complet
        console.log('\nüìã Test 3: Test de t√©l√©chargement complet avec OPSIO...');
        
        const downloadResponse = await makeRequest('http://localhost:3001/api/agent/download-documents', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                caseId: testCase.id,
                clientId: testCase.client_id,
                includeWordDocuments: true,
                includeSignatures: true,
                generateWordWithSignature: true,
                signatureData: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=='
            })
        });
        
        console.log('R√©sultat t√©l√©chargement complet:');
        console.log('- Statut HTTP:', downloadResponse.statusCode);
        console.log('- Est un ZIP:', downloadResponse.isZip ? '‚úÖ' : '‚ùå');
        console.log('- Taille:', downloadResponse.rawData ? `${(downloadResponse.rawData.length / 1024).toFixed(2)} KB` : 'N/A');
        
        if (downloadResponse.isZip) {
            fs.writeFileSync('test-download-with-opsio.zip', downloadResponse.rawData, 'binary');
            console.log('‚úÖ ZIP t√©l√©charg√©: test-download-with-opsio.zip');
            
            // Analyser le contenu du ZIP
            const JSZip = require('jszip');
            const zip = new JSZip();
            
            try {
                const zipContent = await zip.loadAsync(downloadResponse.rawData, { binary: true });
                const files = Object.keys(zipContent.files);
                
                console.log('\nüìÅ CONTENU DU ZIP:');
                files.forEach(filename => {
                    console.log(`- ${filename}`);
                });
                
                // V√©rifier si le document OPSIO est pr√©sent
                const opsioFiles = files.filter(f => f.toLowerCase().includes('opsio'));
                
                if (opsioFiles.length > 0) {
                    console.log('\n‚úÖ DOCUMENTS OPSIO TROUV√âS:');
                    opsioFiles.forEach(filename => {
                        console.log(`‚úÖ ${filename}`);
                    });
                } else {
                    console.log('\n‚ùå AUCUN DOCUMENT OPSIO TROUV√â DANS LE ZIP !');
                    console.log('üìã Fichiers pr√©sents:');
                    files.forEach(filename => {
                        console.log(`- ${filename}`);
                    });
                }
                
            } catch (zipError) {
                console.error('‚ùå Erreur analyse ZIP:', zipError.message);
            }
            
        } else {
            console.log('‚ùå R√©ponse n\'est pas un ZIP');
            if (downloadResponse.rawData) {
                console.log('Donn√©es re√ßues:', downloadResponse.rawData.substring(0, 500));
            }
        }
        
        console.log('\nüéâ TEST T√âL√âCHARGEMENT OPSIO TERMIN√â !');
        console.log('');
        console.log('üìã R√âSUM√â:');
        console.log('');
        console.log('‚úÖ V√âRIFICATIONS EFFECTU√âES:');
        console.log('   - G√©n√©ration OPSIO directe via API');
        console.log('   - T√©l√©chargement complet avec option OPSIO');
        console.log('   - Analyse du contenu du ZIP');
        console.log('   - Recherche des documents OPSIO');
        console.log('');
        console.log('üîç DIAGNOSTIC:');
        console.log('   - Si aucun document OPSIO trouv√© dans le ZIP:');
        console.log('     ‚Üí Probl√®me dans la fonction generateOpsioDocuments()');
        console.log('     ‚Üí Port incorrect (3000 vs 3001)');
        console.log('     ‚Üí Erreur dans l\'API de g√©n√©ration');
        console.log('');
        console.log('   - Si g√©n√©ration directe fonctionne mais pas le t√©l√©chargement:');
        console.log('     ‚Üí Probl√®me dans l\'int√©gration du ZIP');
        console.log('     ‚Üí Erreur dans la fonction de t√©l√©chargement');
        console.log('');
        console.log('üîß SOLUTIONS:');
        console.log('   - Corriger le port dans generateOpsioDocuments()');
        console.log('   - V√©rifier l\'int√©gration dans le ZIP');
        console.log('   - Tester l\'API de g√©n√©ration OPSIO');
        
    } catch (error) {
        console.error('\n‚ùå ERREUR G√âN√âRALE:', error.message);
    }
}

testDownloadOpsioFix();
