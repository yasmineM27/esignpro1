import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API Apply Signature - D√©but traitement');

    const { token } = await request.json();

    if (!token) {
      return NextResponse.json({
        success: false,
        error: 'Token manquant'
      }, { status: 400 });
    }

    // 1. R√©cup√©rer les donn√©es du dossier
    const { data: caseData, error: caseError } = await supabaseAdmin
      .from('insurance_cases')
      .select('id, case_number, client_id')
      .eq('secure_token', token)
      .single();

    if (caseError || !caseData) {
      console.error('‚ùå Dossier non trouv√©:', token);
      return NextResponse.json({
        success: false,
        error: 'Dossier non trouv√©'
      }, { status: 404 });
    }

    console.log('‚úÖ Dossier trouv√©:', caseData.case_number);

    // 2. R√©cup√©rer les informations du client
    const { data: clientData, error: clientError } = await supabaseAdmin
      .from('clients')
      .select('user_id')
      .eq('id', caseData.client_id)
      .single();

    if (clientError || !clientData) {
      console.error('‚ùå Client non trouv√©');
      return NextResponse.json({
        success: false,
        error: 'Client non trouv√©'
      }, { status: 404 });
    }

    // 3. R√©cup√©rer le nom du client
    const { data: userData, error: userError } = await supabaseAdmin
      .from('users')
      .select('first_name, last_name')
      .eq('id', clientData.user_id)
      .single();

    if (userError || !userData) {
      console.error('‚ùå Utilisateur non trouv√©');
      return NextResponse.json({
        success: false,
        error: 'Utilisateur non trouv√©'
      }, { status: 404 });
    }

    const clientName = `${userData.first_name} ${userData.last_name}`;
    console.log('‚úÖ Client:', clientName);

    // 4. R√©cup√©rer la signature active du client
    const { data: signatureData, error: signatureError } = await supabaseAdmin
      .from('client_signatures')
      .select('*')
      .eq('client_id', caseData.client_id)
      .eq('is_active', true)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    if (signatureError || !signatureData) {
      console.error('‚ùå Signature non trouv√©e');
      return NextResponse.json({
        success: false,
        error: 'Aucune signature active trouv√©e pour ce client'
      }, { status: 404 });
    }

    console.log('‚úÖ Signature trouv√©e:', signatureData.signature_name);

    // 5. Mettre √† jour le statut du dossier √† "signed"
    const timestamp = new Date().toISOString();
    
    const { error: updateCaseError } = await supabaseAdmin
      .from('insurance_cases')
      .update({
        status: 'completed', // Chang√© de 'signed' √† 'completed' pour qu'il apparaisse dans "Termin√©s"
        completed_at: timestamp,
        updated_at: timestamp
      })
      .eq('id', caseData.id);

    if (updateCaseError) {
      console.error('‚ùå Erreur mise √† jour dossier:', updateCaseError);
      return NextResponse.json({
        success: false,
        error: 'Erreur lors de la mise √† jour du dossier'
      }, { status: 500 });
    }

    // 6. Marquer le client comme ayant une signature
    const { error: updateClientError } = await supabaseAdmin
      .from('clients')
      .update({
        has_signature: true,
        updated_at: timestamp
      })
      .eq('id', caseData.client_id);

    if (updateClientError) {
      console.warn('‚ö†Ô∏è Erreur mise √† jour client:', updateClientError);
    }

    console.log('‚úÖ Signature appliqu√©e avec succ√®s au dossier');

    return NextResponse.json({
      success: true,
      message: 'Signature appliqu√©e avec succ√®s',
      data: {
        signedDocuments: 1, // Pour l'instant, on consid√®re qu'on a sign√© le dossier
        clientName,
        signatureAppliedAt: timestamp,
        caseNumber: caseData.case_number
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur API Apply Signature:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur'
    }, { status: 500 });
  }
}
