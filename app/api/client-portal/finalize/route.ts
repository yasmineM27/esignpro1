import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ API Finalize - D√©but traitement');

    const { token } = await request.json();

    if (!token) {
      return NextResponse.json({
        success: false,
        error: 'Token manquant'
      }, { status: 400 });
    }

    // V√©rifier que le dossier existe
    const { data: caseData, error: caseError } = await supabaseAdmin
      .from('insurance_cases')
      .select('id, case_number, status')
      .eq('secure_token', token)
      .single();

    if (caseError || !caseData) {
      console.error('‚ùå Token invalide:', token);
      return NextResponse.json({
        success: false,
        error: 'Dossier non trouv√©'
      }, { status: 404 });
    }

    console.log('‚úÖ Dossier trouv√©:', caseData.case_number);

    // V√©rifier que les documents requis sont upload√©s
    const { data: documents, error: docsError } = await supabaseAdmin
      .from('client_documents')
      .select('documenttype')
      .eq('token', token);

    if (docsError) {
      console.error('‚ùå Erreur r√©cup√©ration documents:', docsError);
      return NextResponse.json({
        success: false,
        error: 'Erreur lors de la v√©rification des documents'
      }, { status: 500 });
    }

    const requiredTypes = ['identity_front', 'identity_back'];
    const uploadedTypes = documents?.map(doc => doc.documenttype) || [];
    const missingRequired = requiredTypes.filter(type => !uploadedTypes.includes(type));

    if (missingRequired.length > 0) {
      return NextResponse.json({
        success: false,
        error: `Documents requis manquants: ${missingRequired.join(', ')}`
      }, { status: 400 });
    }

    console.log('‚úÖ Tous les documents requis sont pr√©sents');

    // Mettre √† jour le statut du dossier
    const { error: updateError } = await supabaseAdmin
      .from('insurance_cases')
      .update({
        status: 'documents_uploaded',
        updated_at: new Date().toISOString()
      })
      .eq('id', caseData.id);

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour statut:', updateError);
      return NextResponse.json({
        success: false,
        error: 'Erreur lors de la finalisation'
      }, { status: 500 });
    }

    console.log('‚úÖ Dossier finalis√© avec succ√®s');

    return NextResponse.json({
      success: true,
      message: 'Dossier finalis√© avec succ√®s ! Vous pouvez maintenant proc√©der √† la signature.'
    });

  } catch (error) {
    console.error('‚ùå Erreur API Finalize:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur'
    }, { status: 500 });
  }
}
