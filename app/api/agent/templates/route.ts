import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase';

// Templates pr√©d√©finis pour diff√©rents types de documents
const PREDEFINED_TEMPLATES = [
  {
    id: 'template_resiliation_auto',
    name: 'R√©siliation Assurance Auto',
    category: 'resiliation',
    description: 'Lettre de r√©siliation pour assurance automobile',
    variables: ['clientName', 'clientAddress', 'policyNumber', 'insuranceCompany', 'terminationDate', 'reason'],
    content: `
Objet : R√©siliation de contrat d'assurance automobile

Madame, Monsieur,

Par la pr√©sente, je vous informe de ma d√©cision de r√©silier mon contrat d'assurance automobile n¬∞ {{policyNumber}} souscrit aupr√®s de {{insuranceCompany}}.

Titulaire du contrat : {{clientName}}
Adresse : {{clientAddress}}
Num√©ro de police : {{policyNumber}}

Cette r√©siliation prendra effet le {{terminationDate}}.

Motif de la r√©siliation : {{reason}}

Je vous prie de bien vouloir me faire parvenir un accus√© de r√©ception de cette demande ainsi que le d√©compte de r√©gularisation.

Cordialement,

{{clientName}}
Date : {{currentDate}}
Signature : [SIGNATURE_PLACEHOLDER]
    `,
    isActive: true
  },
  {
    id: 'template_resiliation_habitation',
    name: 'R√©siliation Assurance Habitation',
    category: 'resiliation',
    description: 'Lettre de r√©siliation pour assurance habitation',
    variables: ['clientName', 'clientAddress', 'policyNumber', 'insuranceCompany', 'terminationDate', 'reason'],
    content: `
Objet : R√©siliation de contrat d'assurance habitation

Madame, Monsieur,

Je soussign√©(e) {{clientName}}, vous notifie par la pr√©sente ma volont√© de r√©silier mon contrat d'assurance habitation.

R√©f√©rences du contrat :
- Num√©ro de police : {{policyNumber}}
- Compagnie d'assurance : {{insuranceCompany}}
- Adresse assur√©e : {{clientAddress}}

Date de r√©siliation souhait√©e : {{terminationDate}}
Motif : {{reason}}

Je vous demande de bien vouloir me confirmer la prise en compte de cette r√©siliation et de proc√©der au remboursement du trop-per√ßu le cas √©ch√©ant.

Cordialement,

{{clientName}}
Date : {{currentDate}}
Signature : [SIGNATURE_PLACEHOLDER]
    `,
    isActive: true
  },
  {
    id: 'template_resiliation_sante',
    name: 'R√©siliation Assurance Sant√©',
    category: 'resiliation',
    description: 'Lettre de r√©siliation pour assurance maladie/sant√©',
    variables: ['clientName', 'clientAddress', 'policyNumber', 'insuranceCompany', 'terminationDate', 'reason'],
    content: `
Objet : R√©siliation de contrat d'assurance maladie compl√©mentaire

Madame, Monsieur,

Par la pr√©sente lettre recommand√©e avec accus√© de r√©ception, je vous informe de ma d√©cision de r√©silier mon contrat d'assurance maladie compl√©mentaire.

Informations du contrat :
- Assur√© : {{clientName}}
- Adresse : {{clientAddress}}
- Num√©ro d'adh√©rent : {{policyNumber}}
- Organisme : {{insuranceCompany}}

Date de r√©siliation : {{terminationDate}}
Motif de r√©siliation : {{reason}}

Conform√©ment aux dispositions l√©gales, je vous demande de me faire parvenir un accus√© de r√©ception de cette demande.

Je vous prie d'agr√©er, Madame, Monsieur, l'expression de mes salutations distingu√©es.

{{clientName}}
Date : {{currentDate}}
Signature : [SIGNATURE_PLACEHOLDER]
    `,
    isActive: true
  },
  {
    id: 'template_avenant_modification',
    name: 'Avenant de Modification',
    category: 'avenant',
    description: 'Avenant pour modification de contrat',
    variables: ['clientName', 'clientAddress', 'policyNumber', 'insuranceCompany', 'modificationType', 'modificationDetails'],
    content: `
AVENANT N¬∞ {{avenantNumber}} AU CONTRAT D'ASSURANCE N¬∞ {{policyNumber}}

Entre :
{{insuranceCompany}}, ci-apr√®s d√©nomm√©e "l'Assureur"

Et :
{{clientName}}
Domicili√©(e) √† : {{clientAddress}}
ci-apr√®s d√©nomm√©(e) "l'Assur√©"

ARTICLE 1 - OBJET DE L'AVENANT
Le pr√©sent avenant a pour objet de modifier le contrat d'assurance susvis√© comme suit :

Type de modification : {{modificationType}}
D√©tails : {{modificationDetails}}

ARTICLE 2 - PRISE D'EFFET
Les pr√©sentes modifications prennent effet le {{effectiveDate}}.

ARTICLE 3 - AUTRES DISPOSITIONS
Toutes les autres clauses du contrat initial demeurent inchang√©es.

Fait en double exemplaire,

L'Assur√©                           L'Assureur
{{clientName}}                     {{insuranceCompany}}

Date : {{currentDate}}
Signature : [SIGNATURE_PLACEHOLDER]
    `,
    isActive: true
  },
  {
    id: 'template_declaration_sinistre',
    name: 'D√©claration de Sinistre',
    category: 'sinistre',
    description: 'Formulaire de d√©claration de sinistre',
    variables: ['clientName', 'policyNumber', 'sinisterDate', 'sinisterTime', 'sinisterLocation', 'sinisterDescription', 'circumstances'],
    content: `
D√âCLARATION DE SINISTRE

INFORMATIONS DE L'ASSUR√â
Nom et pr√©nom : {{clientName}}
Num√©ro de police : {{policyNumber}}

INFORMATIONS DU SINISTRE
Date du sinistre : {{sinisterDate}}
Heure approximative : {{sinisterTime}}
Lieu du sinistre : {{sinisterLocation}}

DESCRIPTION DU SINISTRE
{{sinisterDescription}}

CIRCONSTANCES
{{circumstances}}

T√âMOINS (si applicable)
Nom : ________________________
T√©l√©phone : ___________________

Je certifie sur l'honneur l'exactitude des d√©clarations ci-dessus.

Fait le {{currentDate}}

Signature de l'assur√© :
[SIGNATURE_PLACEHOLDER]
    `,
    isActive: true
  }
];

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const category = searchParams.get('category'); // resiliation, avenant, sinistre
    const active = searchParams.get('active') !== 'false';

    console.log('üìã R√©cup√©ration templates:', { category, active });

    // Filtrer les templates selon les crit√®res
    let templates = PREDEFINED_TEMPLATES;

    if (category) {
      templates = templates.filter(t => t.category === category);
    }

    if (active) {
      templates = templates.filter(t => t.isActive);
    }

    // Ajouter des m√©tadonn√©es
    const templatesWithMeta = templates.map(template => ({
      ...template,
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
      usageCount: Math.floor(Math.random() * 100) + 1, // Simul√©
      lastUsed: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()
    }));

    console.log(`‚úÖ ${templatesWithMeta.length} templates r√©cup√©r√©s`);

    return NextResponse.json({
      success: true,
      templates: templatesWithMeta,
      count: templatesWithMeta.length,
      categories: ['resiliation', 'avenant', 'sinistre']
    });

  } catch (error) {
    console.error('‚ùå Erreur API templates:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur'
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const { templateIds, caseId, agentId, customVariables } = await request.json();

    console.log('üìù G√©n√©ration documents:', { templateIds, caseId, agentId });

    if (!templateIds || !Array.isArray(templateIds) || templateIds.length === 0) {
      return NextResponse.json({
        success: false,
        error: 'templateIds requis (array)'
      }, { status: 400 });
    }

    if (!caseId || !agentId) {
      return NextResponse.json({
        success: false,
        error: 'caseId et agentId requis'
      }, { status: 400 });
    }

    // R√©cup√©rer les donn√©es du dossier
    const { data: caseData, error: caseError } = await supabaseAdmin
      .from('insurance_cases')
      .select(`
        id,
        case_number,
        insurance_company,
        insurance_type,
        policy_number,
        termination_date,
        reason_for_termination,
        clients!inner(
          users!inner(
            first_name,
            last_name,
            email,
            phone,
            address
          )
        )
      `)
      .eq('id', caseId)
      .single();

    if (caseError || !caseData) {
      console.error('‚ùå Dossier non trouv√©:', caseError);
      return NextResponse.json({
        success: false,
        error: 'Dossier non trouv√©'
      }, { status: 404 });
    }

    // Pr√©parer les variables pour le remplissage
    const variables = {
      clientName: `${caseData.clients.users.first_name} ${caseData.clients.users.last_name}`,
      clientAddress: caseData.clients.users.address || 'Adresse non renseign√©e',
      clientEmail: caseData.clients.users.email,
      clientPhone: caseData.clients.users.phone || '',
      policyNumber: caseData.policy_number || 'N/A',
      insuranceCompany: caseData.insurance_company || 'N/A',
      insuranceType: caseData.insurance_type || 'N/A',
      terminationDate: caseData.termination_date || new Date().toISOString().split('T')[0],
      reason: caseData.reason_for_termination || 'R√©siliation √† l\'√©ch√©ance',
      currentDate: new Date().toLocaleDateString('fr-CH'),
      caseNumber: caseData.case_number,
      avenantNumber: `AV-${Date.now()}`,
      effectiveDate: new Date().toISOString().split('T')[0],
      ...customVariables // Variables personnalis√©es de l'agent
    };

    // G√©n√©rer les documents
    const generatedDocuments = [];

    for (const templateId of templateIds) {
      const template = PREDEFINED_TEMPLATES.find(t => t.id === templateId);
      
      if (!template) {
        console.warn(`‚ö†Ô∏è Template non trouv√©: ${templateId}`);
        continue;
      }

      // Remplacer les variables dans le contenu
      let content = template.content;
      
      for (const [key, value] of Object.entries(variables)) {
        const regex = new RegExp(`{{${key}}}`, 'g');
        content = content.replace(regex, String(value));
      }

      generatedDocuments.push({
        templateId: template.id,
        templateName: template.name,
        category: template.category,
        content: content,
        variables: variables,
        generatedAt: new Date().toISOString()
      });
    }

    // Sauvegarder dans la base (optionnel - pour l'historique)
    try {
      await supabaseAdmin
        .from('generated_documents')
        .insert(
          generatedDocuments.map(doc => ({
            case_id: caseId,
            template_id: doc.templateId,
            template_name: doc.templateName,
            content: doc.content,
            variables: doc.variables,
            generated_by: agentId,
            created_at: doc.generatedAt
          }))
        );
    } catch (saveError) {
      console.warn('‚ö†Ô∏è Erreur sauvegarde documents:', saveError);
      // Continue quand m√™me
    }

    console.log(`‚úÖ ${generatedDocuments.length} documents g√©n√©r√©s`);

    return NextResponse.json({
      success: true,
      documents: generatedDocuments,
      count: generatedDocuments.length,
      caseInfo: {
        caseNumber: caseData.case_number,
        clientName: variables.clientName,
        insuranceCompany: variables.insuranceCompany
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration documents:', error);
    return NextResponse.json({
      success: false,
      error: 'Erreur serveur lors de la g√©n√©ration'
    }, { status: 500 });
  }
}
