// Test pour v√©rifier que la signature appara√Æt bien sous "Signature Client(e):"
const fs = require('fs');

async function testSignatureSousClient() {
    console.log('üéØ TEST: SIGNATURE DIRECTEMENT SOUS "Signature Client(e):" \n');
    
    try {
        const { Document, Packer, Paragraph, TextRun, AlignmentType, ImageRun } = require('docx');
        
        console.log('üìã Cr√©ation du document avec signature sous "Signature Client(e):"...');
        
        // Signature de test
        const testSignatureBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        
        // Donn√©es de test
        const data = {
            clientName: 'Jean Dupont',
            clientAddress: 'Rue de la Paix 123',
            clientPostalCity: '1200 Gen√®ve',
            signatureData: testSignatureBase64
        };
        
        const currentDate = new Date().toLocaleDateString('fr-CH');
        
        const doc = new Document({
            sections: [
                {
                    properties: {
                        page: {
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440,
                            },
                        },
                    },
                    children: [
                        // En-t√™te OPSIO
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "OPSIO S√†rl, Avenue de Bel-Air 16, 1225 Ch√™ne-Bourg",
                                    size: 20,
                                }),
                            ],
                            alignment: AlignmentType.CENTER,
                            spacing: { after: 600 },
                        }),

                        // Titre
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "Feuille d'information du conseiller aux preneurs d'assurance selon l'art. 45 LSA",
                                    bold: true,
                                    size: 24,
                                }),
                            ],
                            alignment: AlignmentType.CENTER,
                            spacing: { after: 600 },
                        }),

                        // Donn√©es client
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: `Nom et Pr√©nom: ${data.clientName}`,
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 200 },
                        }),

                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: `Adresse: ${data.clientAddress}`,
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 200 },
                        }),

                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: `NPA/Localit√©: ${data.clientPostalCity}`,
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 600 },
                        }),

                        // Texte de confirmation
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "Par la pr√©sente, le/la soussign√©(e) confirme que le conseiller/√®re √† la client√®le de OPSIO S√†rl lui a remis le pr√©sent document et lui en a d√ªment explicit√© le contenu, avant la conclusion du contrat de courtage.",
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 600 },
                        }),

                        // Section signatures S√âPAR√âES
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "Signature Conseiller/√®re √† la client√®le:",
                                    size: 20,
                                    bold: true,
                                }),
                            ],
                            spacing: { after: 200 },
                        }),

                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶",
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 400 },
                        }),

                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "Signature Client(e):",
                                    size: 20,
                                    bold: true,
                                }),
                            ],
                            spacing: { after: 200 },
                        }),

                        // SIGNATURE R√âELLE DIRECTEMENT SOUS "Signature Client(e):"
                        new Paragraph({
                            children: data.signatureData ? [
                                // Ajouter l'image de signature r√©elle si disponible
                                new ImageRun({
                                    data: Buffer.from(data.signatureData, 'base64'),
                                    transformation: {
                                        width: 200,
                                        height: 100,
                                    },
                                }),
                            ] : [
                                // Ligne vide pour signature manuelle si pas de signature √©lectronique
                                new TextRun({
                                    text: "‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶",
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 100 },
                        }),

                        // Ajouter le texte de confirmation de signature √©lectronique
                        ...(data.signatureData ? [
                            new Paragraph({
                                children: [
                                    new TextRun({
                                        text: `[Signature √©lectronique appliqu√©e le ${currentDate}]`,
                                        size: 18,
                                        italics: true,
                                        color: "666666",
                                    }),
                                ],
                                spacing: { after: 400 },
                            })
                        ] : []),

                        // Espacement final
                        new Paragraph({
                            children: [
                                new TextRun({
                                    text: "",
                                    size: 20,
                                }),
                            ],
                            spacing: { after: 400 },
                        }),
                    ],
                },
            ],
        });

        const buffer = await Packer.toBuffer(doc);
        fs.writeFileSync('test-signature-sous-client.docx', buffer);
        
        console.log('‚úÖ Document cr√©√©: test-signature-sous-client.docx');
        console.log('- Taille:', buffer.length, 'bytes');
        console.log('- Structure: Signatures s√©par√©es');
        console.log('- Conseiller: Ligne pointill√©e');
        console.log('- Client: SIGNATURE R√âELLE directement en dessous');
        
        console.log('\nüéâ TEST SIGNATURE SOUS CLIENT R√âUSSI !');
        console.log('');
        console.log('üìã STRUCTURE CORRIG√âE:');
        console.log('1. "Signature Conseiller/√®re √† la client√®le:" (en gras)');
        console.log('2. Ligne pointill√©e pour le conseiller');
        console.log('3. Espacement');
        console.log('4. "Signature Client(e):" (en gras)');
        console.log('5. IMAGE DE SIGNATURE R√âELLE directement en dessous');
        console.log('6. Texte de confirmation avec date');
        console.log('');
        console.log('üîç V√âRIFICATION:');
        console.log('1. Ouvrez test-signature-sous-client.docx dans Microsoft Word');
        console.log('2. V√©rifiez que "Signature Client(e):" est en gras');
        console.log('3. V√©rifiez que la signature IMAGE appara√Æt DIRECTEMENT en dessous');
        console.log('4. V√©rifiez que la signature du conseiller a une ligne pointill√©e');
        console.log('5. V√©rifiez l\'espacement entre les deux signatures');
        console.log('');
        console.log('üéØ R√âSULTAT:');
        console.log('La signature r√©elle appara√Æt maintenant DIRECTEMENT sous');
        console.log('"Signature Client(e):" comme demand√© !');
        
    } catch (error) {
        console.error('\n‚ùå ERREUR:', error.message);
        console.error('Stack:', error.stack);
    }
}

testSignatureSousClient();
