#!/usr/bin/env node

/**
 * Script de test pour valider les am√©liorations responsive et mobile
 */

const fs = require('fs');
const path = require('path');

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function checkFileContent(filePath, searchPatterns, description) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let allFound = true;
    const results = [];

    for (const pattern of searchPatterns) {
      const found = content.includes(pattern);
      results.push({ pattern, found });
      if (!found) allFound = false;
    }

    log(allFound ? 'green' : 'red', `${allFound ? '‚úÖ' : '‚ùå'} ${description}`);
    
    if (!allFound) {
      results.forEach(({ pattern, found }) => {
        if (!found) {
          log('red', `   ‚ùå Manque: ${pattern}`);
        }
      });
    }

    return allFound;
  } catch (error) {
    log('red', `‚ùå Erreur lecture ${filePath}: ${error.message}`);
    return false;
  }
}

async function testResponsiveMobile() {
  log('blue', 'üì± TESTS RESPONSIVE & MOBILE');
  log('blue', '============================\n');

  let passed = 0;
  let failed = 0;

  // Test 1: Viewport meta tag
  log('yellow', 'üì± Test 1: Viewport meta tag...');
  const viewportPatterns = [
    'viewport: "width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"'
  ];
  
  if (checkFileContent('app/layout.tsx', viewportPatterns, 'Viewport meta tag configur√©')) {
    passed++;
  } else {
    failed++;
  }

  // Test 2: Client portal responsive
  log('yellow', '\nüì± Test 2: Client portal responsive...');
  const portalPatterns = [
    'className="min-h-screen bg-slate-50 p-4 sm:p-6 lg:p-8',
    'className="max-w-4xl mx-auto bg-white rounded-xl',
    'className="bg-gradient-to-br from-blue-500 to-purple-600',
    'className="text-xl sm:text-2xl lg:text-3xl',
    'className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3'
  ];
  
  if (checkFileContent('app/client-portal/[clientId]/page.tsx', portalPatterns, 'Client portal responsive')) {
    passed++;
  } else {
    failed++;
  }

  // Test 3: Signature responsive
  log('yellow', '\nüì± Test 3: Signature responsive...');
  const signaturePatterns = [
    'className="space-y-4 sm:space-y-6"',
    'className="block sm:hidden bg-yellow-50',
    'height: \'clamp(150px, 25vw, 200px)\'',
    'className="flex flex-col sm:flex-row gap-3',
    'window.innerWidth < 768 ? 3 : 2'
  ];
  
  if (checkFileContent('components/digital-signature.tsx', signaturePatterns, 'Signature responsive')) {
    passed++;
  } else {
    failed++;
  }

  // Test 4: Validation mobile am√©lior√©e
  log('yellow', '\nüì± Test 4: Validation mobile...');
  const validationPatterns = [
    'if (window.innerWidth < 768) {',
    'alert("‚ùå SIGNATURE REQUISE',
    'alert("‚ùå SIGNATURE INCOMPL√àTE',
    'üì± Veuillez dessiner votre signature avec votre doigt'
  ];
  
  if (checkFileContent('components/digital-signature.tsx', validationPatterns, 'Validation mobile am√©lior√©e')) {
    passed++;
  } else {
    failed++;
  }

  // Test 5: Instructions mobile
  log('yellow', '\nüì± Test 5: Instructions mobile...');
  const instructionsPatterns = [
    'className="block sm:hidden bg-yellow-50',
    'üì± <strong>Sur mobile :</strong>',
    'Utilisez votre doigt pour dessiner',
    'className="hidden sm:inline"',
    'className="sm:hidden"'
  ];
  
  if (checkFileContent('components/digital-signature.tsx', instructionsPatterns, 'Instructions mobile sp√©cifiques')) {
    passed++;
  } else {
    failed++;
  }

  // Test 6: Boutons responsive
  log('yellow', '\nüì± Test 6: Boutons responsive...');
  const buttonsPatterns = [
    'className="flex flex-col sm:flex-row gap-3',
    'className="hidden sm:inline">Effacer</span>',
    'className="sm:hidden">Recommencer</span>',
    'className="hidden sm:inline">Confirmer la Signature</span>',
    'className="sm:hidden">Valider</span>'
  ];
  
  if (checkFileContent('components/digital-signature.tsx', buttonsPatterns, 'Boutons responsive')) {
    passed++;
  } else {
    failed++;
  }

  // Test 7: Canvas mobile optimis√©
  log('yellow', '\nüì± Test 7: Canvas mobile optimis√©...');
  const canvasPatterns = [
    'height: \'clamp(150px, 25vw, 200px)\'',
    'cursor: isConfirmed ? \'default\' : \'crosshair\'',
    'window.innerWidth < 768 ? 3 : 2',
    'touchAction: \'none\''
  ];
  
  if (checkFileContent('components/digital-signature.tsx', canvasPatterns, 'Canvas mobile optimis√©')) {
    passed++;
  } else {
    failed++;
  }

  // R√©sum√©
  log('blue', '\nüìä R√âSUM√â TESTS RESPONSIVE');
  log('blue', '===========================');
  log('green', `‚úÖ Tests r√©ussis: ${passed}`);
  log('red', `‚ùå Tests √©chou√©s: ${failed}`);
  log('blue', `üìà Taux de r√©ussite: ${Math.round((passed / (passed + failed)) * 100)}%`);

  if (failed === 0) {
    log('green', '\nüéâ INTERFACE PARFAITEMENT RESPONSIVE !');
    log('green', '   ‚úÖ Viewport meta tag configur√©');
    log('green', '   ‚úÖ Client portal responsive');
    log('green', '   ‚úÖ Signature adapt√©e mobile');
    log('green', '   ‚úÖ Validation mobile am√©lior√©e');
    log('green', '   ‚úÖ Instructions sp√©cifiques mobile');
    log('green', '   ‚úÖ Boutons responsive');
    log('green', '   ‚úÖ Canvas optimis√© mobile');
  } else {
    log('yellow', '\n‚ö†Ô∏è Certaines am√©liorations responsive manquantes');
    log('yellow', '   V√©rifiez les logs ci-dessus pour les d√©tails');
  }

  return { passed, failed };
}

// Test des breakpoints responsive
function testBreakpoints() {
  log('blue', '\nüì± BREAKPOINTS RESPONSIVE');
  log('blue', '=========================');

  const breakpoints = {
    'Mobile': '< 768px (sm:)',
    'Tablet': '768px - 1024px (sm: - lg:)',
    'Desktop': '> 1024px (lg:+)'
  };

  log('green', '‚úÖ Breakpoints configur√©s:');
  Object.entries(breakpoints).forEach(([device, range]) => {
    log('blue', `   üì± ${device}: ${range}`);
  });

  log('green', '\nüéØ ADAPTATIONS PAR APPAREIL:');
  log('blue', '   üì± Mobile:');
  log('green', '      ‚úÖ Canvas plus haut (clamp)');
  log('green', '      ‚úÖ Trait plus √©pais (3px)');
  log('green', '      ‚úÖ Boutons empil√©s verticalement');
  log('green', '      ‚úÖ Textes adapt√©s');
  log('green', '      ‚úÖ Instructions sp√©cifiques');
  log('green', '      ‚úÖ Alertes natives');
  
  log('blue', '   üíª Desktop:');
  log('green', '      ‚úÖ Canvas standard');
  log('green', '      ‚úÖ Trait normal (2px)');
  log('green', '      ‚úÖ Boutons c√¥te √† c√¥te');
  log('green', '      ‚úÖ Toasts √©l√©gants');
}

// Ex√©cuter les tests
if (require.main === module) {
  testResponsiveMobile()
    .then(({ passed, failed }) => {
      testBreakpoints();
      
      if (failed === 0) {
        log('green', '\nüéØ R√âSULTAT: INTERFACE PARFAITEMENT RESPONSIVE');
        log('green', 'üöÄ Signature mobile, validation et interface optimis√©es !');
        process.exit(0);
      } else {
        log('red', '\n‚ùå R√âSULTAT: AM√âLIORATIONS RESPONSIVE INCOMPL√àTES');
        process.exit(1);
      }
    })
    .catch(error => {
      log('red', `‚ùå Erreur fatale: ${error.message}`);
      process.exit(1);
    });
}

module.exports = { testResponsiveMobile };
